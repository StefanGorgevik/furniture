{"version":3,"file":"static/js/728.d032c075.chunk.js","mappings":"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","sources":["../node_modules/@material-ui/core/esm/InputAdornment/InputAdornment.js","components/UI/Inputs/SearchInput.js","pages/SearchedAll/SearchedAll.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport Typography from '../Typography';\nimport withStyles from '../styles/withStyles';\nimport FormControlContext, { useFormControl } from '../FormControl/FormControlContext';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    height: '0.01em',\n    // Fix IE 11 flexbox alignment. To remove at some point.\n    maxHeight: '2em',\n    alignItems: 'center',\n    whiteSpace: 'nowrap'\n  },\n\n  /* Styles applied to the root element if `variant=\"filled\"`. */\n  filled: {\n    '&$positionStart:not($hiddenLabel)': {\n      marginTop: 16\n    }\n  },\n\n  /* Styles applied to the root element if `position=\"start\"`. */\n  positionStart: {\n    marginRight: 8\n  },\n\n  /* Styles applied to the root element if `position=\"end\"`. */\n  positionEnd: {\n    marginLeft: 8\n  },\n\n  /* Styles applied to the root element if `disablePointerEvents=true`. */\n  disablePointerEvents: {\n    pointerEvents: 'none'\n  },\n\n  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */\n  hiddenLabel: {},\n\n  /* Styles applied if the adornment is used inside <FormControl margin=\"dense\" />. */\n  marginDense: {}\n};\nvar InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      _props$disablePointer = props.disablePointerEvents,\n      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      position = props.position,\n      variantProp = props.variant,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"component\", \"disablePointerEvents\", \"disableTypography\", \"position\", \"variant\"]);\n\n  var muiFormControl = useFormControl() || {};\n  var variant = variantProp;\n\n  if (variantProp && muiFormControl.variant) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (variantProp === muiFormControl.variant) {\n        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');\n      }\n    }\n  }\n\n  if (muiFormControl && !variant) {\n    variant = muiFormControl.variant;\n  }\n\n  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {\n    value: null\n  }, /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className, position === 'end' ? classes.positionEnd : classes.positionStart, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, muiFormControl.margin === 'dense' && classes.marginDense),\n    ref: ref\n  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography, {\n    color: \"textSecondary\"\n  }, children) : children));\n});\nprocess.env.NODE_ENV !== \"production\" ? InputAdornment.propTypes = {\n  /**\n   * The content of the component, normally an `IconButton` or string.\n   */\n  children: PropTypes.node.isRequired,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\n   * Disable pointer events on the root.\n   * This allows for the content of the adornment to focus the input on click.\n   */\n  disablePointerEvents: PropTypes.bool,\n\n  /**\n   * If children is a string then disable wrapping in a Typography component.\n   */\n  disableTypography: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  muiFormControl: PropTypes.object,\n\n  /**\n   * The position this adornment should appear relative to the `Input`.\n   */\n  position: PropTypes.oneOf(['start', 'end']).isRequired,\n\n  /**\n   * The variant to use.\n   * Note: If you are using the `TextField` component or the `FormControl` component\n   * you do not have to set this manually.\n   */\n  variant: PropTypes.oneOf(['standard', 'outlined', 'filled'])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiInputAdornment'\n})(InputAdornment);","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport {\r\n  getAllFurnitureAction,\r\n  searchForFurnitureAction,\r\n} from \"store/furniture/furnitureActions\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/styles\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  searchIcon: {\r\n    color: \"black\",\r\n    \"&:hover\": {\r\n      background: \"transparent\",\r\n    },\r\n  },\r\n  searchInput: {\r\n    color: \"black\",\r\n    backgroundColor: \"whitesmoke\",\r\n    borderColor: \"white\",\r\n    label: {\r\n      background: \"whitesmoke\",\r\n    },\r\n    \"&.Mui-input\": {\r\n      color: \"black\",\r\n    },\r\n  },\r\n  inputLabel: {\r\n    color: \"black\",\r\n    opacity: \"0.9\",\r\n    letterSpacing: \"2px\",\r\n    \"&.Mui-focused\": {\r\n      color: \"black\",\r\n      background: \"transparent\",\r\n    },\r\n  },\r\n}));\r\nconst SearchInput = ({ searchForFurnitureAction, getAllFurnitureAction }) => {\r\n  const classes = useStyles();\r\n  const [searched, setSearched] = useState(false);\r\n  const [search, setSearch] = useState(\"\");\r\n\r\n  const submitSearch = () => {\r\n    if (search.trim() !== \"\") {\r\n      searchForFurnitureAction(search);\r\n    }\r\n  };\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      submitSearch();\r\n    }\r\n  };\r\n\r\n  const denySearchHandler = useCallback(() => {\r\n    setSearched(false);\r\n    getAllFurnitureAction();\r\n  }, [getAllFurnitureAction]);\r\n\r\n  const saveSearchHandler = (e) => {\r\n    setSearched(true);\r\n    setSearch(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (search.trim().length === 0 && searched) {\r\n      denySearchHandler();\r\n    }\r\n  }, [search, denySearchHandler, searched]);\r\n\r\n  return (\r\n    <TextField\r\n      style={{\r\n        transition: \"1s\",\r\n      }}\r\n      className={classes.searchInput}\r\n      variant=\"outlined\"\r\n      type=\"text\"\r\n      autoFocus={true}\r\n      onChange={saveSearchHandler}\r\n      label=\"Search \"\r\n      id=\"search-input\"\r\n      value={search}\r\n      onKeyPress={handleKeyPress}\r\n      InputLabelProps={{\r\n        className: classes.inputLabel,\r\n      }}\r\n      InputProps={{\r\n        endAdornment: (\r\n          <InputAdornment position=\"end\">\r\n            <IconButton onClick={submitSearch} className={classes.searchIcon}>\r\n              <SearchIcon fontSize=\"large\" />\r\n            </IconButton>\r\n          </InputAdornment>\r\n        ),\r\n        style: {\r\n          color: \"black\",\r\n        },\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  showOwned: state.furnitureReducer.showOwned,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      getAllFurnitureAction,\r\n      searchForFurnitureAction,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchInput);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { bindActionCreators } from \"redux\";\r\nimport { Grid, Typography } from \"@material-ui/core\";\r\nimport {\r\n  searchForFurnitureAction,\r\n  openFurnitureAction,\r\n} from \"store/furniture/furnitureActions\";\r\nimport { FurnitureItem } from \"components/Furniture/FurnitureItem/FurnitureItem\";\r\nimport SearchInput from \"components/UI/Inputs/SearchInput\";\r\nimport { useScreenSize } from \"hooks/breakpoints\";\r\nimport { useNavigate } from \"react-router\";\r\n\r\nconst SearchedAll = ({\r\n  searchedFurniture,\r\n  openFurnitureAction,\r\n  searchedFurnitureLoaded,\r\n  searchFurnitureNotFound,\r\n}) => {\r\n  const { matchesSM } = useScreenSize();\r\n  const navigate = useNavigate();\r\n  const openFurnitureHandler = (id) => {\r\n    openFurnitureAction({\r\n      id,\r\n      shouldRedirect: true,\r\n      navigate,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid container justifyContent=\"center\">\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"center\"\r\n        style={{\r\n          marginTop: matchesSM ? \"2em\" : \"1em\",\r\n          marginBottom: matchesSM ? \"1em\" : 0,\r\n        }}\r\n      >\r\n        <SearchInput />\r\n      </Grid>\r\n      {searchFurnitureNotFound && searchedFurnitureLoaded ? (\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          style={{\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            padding: \"1%\",\r\n            marginTop: 250,\r\n            width: \"95%\",\r\n            height: \"100%\",\r\n          }}\r\n        >\r\n          <Grid item>\r\n            <Typography variant=\"h5\">No results found!</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"caption\">Please try again.</Typography>\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          style={{\r\n            padding: \"1%\",\r\n            margin: \"0 auto\",\r\n            marginBottom: \"4em\",\r\n            width: \"95%\",\r\n          }}\r\n        >\r\n          {searchedFurniture.map((item, j) => {\r\n            return (\r\n              <FurnitureItem\r\n                key={j}\r\n                showIcon={true}\r\n                price={item.price}\r\n                isMine={item.createdBy === localStorage.getItem(\"user_email\")}\r\n                item={item}\r\n                showTools={false}\r\n                onClick={() => openFurnitureHandler(item.id)}\r\n                onDelete={false}\r\n                onEdit={false}\r\n              />\r\n            );\r\n          })}\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  searchedFurniture: state.furnitureReducer.searchedFurniture,\r\n  searchedFurnitureLoaded: state.furnitureReducer.searchedFurnitureLoaded,\r\n  searchFurnitureNotFound: state.furnitureReducer.searchFurnitureNotFound,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) =>\r\n  bindActionCreators(\r\n    {\r\n      openFurnitureAction,\r\n      searchForFurnitureAction,\r\n    },\r\n    dispatch\r\n  );\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SearchedAll);\r\n"],"names":["InputAdornment","React","props","ref","children","classes","className","_props$component","component","Component","_props$disablePointer","disablePointerEvents","_props$disableTypogra","disableTypography","position","variantProp","variant","other","_objectWithoutProperties","muiFormControl","useFormControl","FormControlContext","value","_extends","clsx","root","positionEnd","positionStart","hiddenLabel","filled","margin","marginDense","Typography","color","withStyles","display","height","maxHeight","alignItems","whiteSpace","marginTop","marginRight","marginLeft","pointerEvents","name","useStyles","makeStyles","theme","searchIcon","background","searchInput","backgroundColor","borderColor","label","inputLabel","opacity","letterSpacing","connect","state","showOwned","furnitureReducer","dispatch","bindActionCreators","getAllFurnitureAction","searchForFurnitureAction","useState","searched","setSearched","search","setSearch","submitSearch","trim","denySearchHandler","useCallback","useEffect","length","TextField","style","transition","type","autoFocus","onChange","e","target","id","onKeyPress","key","InputLabelProps","InputProps","endAdornment","IconButton","onClick","Search","fontSize","searchedFurniture","searchedFurnitureLoaded","searchFurnitureNotFound","openFurnitureAction","matchesSM","useScreenSize","navigate","useNavigate","Grid","container","justifyContent","item","marginBottom","flexDirection","padding","width","direction","map","j","FurnitureItem","F","showIcon","price","isMine","createdBy","localStorage","getItem","showTools","shouldRedirect","onDelete","onEdit"],"sourceRoot":""}